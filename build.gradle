buildscript {
    ext.kotlin_version = '1.6.10'
    ext.ktlintVersion = '9.4.1'
    ext.jacocoToolVersion = "0.8.7"
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlintVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

plugins {
    id 'com.github.jk1.dependency-license-report' version '1.16'
    id 'io.gitlab.arturbosch.detekt' version '1.22.0'
}

apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'jacoco'
apply plugin: "org.jlleitschuh.gradle.ktlint"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    testCompile group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.7'

    testCompileOnly("org.junit.jupiter:junit-jupiter-api:5.0.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0")
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.deprecation = true
        }
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.25'
        ignoreFailures true
    }

    ext.kotlin_version = '1.6.10'
    ext.kotlinx_coroutines_version = "1.6.4"
    ext.logbackVersion = "1.2.3"
    ext.nettyVersion = "4.1.54.Final"
    ext.jacksonVersion="2.12.4"


    apply plugin: 'org.owasp.dependencycheck'
    dependencyCheck {
        formats = ['HTML', 'XML']
        outputDirectory = "${buildDir}/reports/dependency-check"
        skipConfigurations = ['checkstyle']
        suppressionFile = "${rootDir}/config/dependency-check/suppressions.xml"
    }
}

tasks.register("reportMerge", io.gitlab.arturbosch.detekt.report.ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif") // "reports/detekt/merge.xml" or "reports/detekt/merge.sarif"
}

subprojects {
    buildscript {
        ext.kotlin_version = '1.6.10'
        ext.ktor_version = '1.5.0' // mavenCentralに存在するversionを指定する
        ext.spekVersion = "2.0.5"

        repositories {
            jcenter()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            maven { url "https://dl.bintray.com/spekframework/spek-dev/" }
            maven { url "http://dl.bintray.com/jetbrains/spek" }
            maven { url "https://kotlin.bintray.com/kotlinx" }
            maven { url "https://dl.bintray.com/kotlin/ktor" }
            maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
            maven { url "https://jitpack.io" }
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
            classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        }
        configurations {
            all*.exclude module: 'servlet-api'
        }
    }

    group "jp.co.brains_tech.neuron.v2"
    version "2.4.1"

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'application'
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'jacoco'

    apply plugin: "org.jlleitschuh.gradle.ktlint" // Version should be inherited from parent

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    ktlint {
        debug = true
        verbose = true
        outputToConsole = true
        reporters {
            reporter "checkstyle"
        }
        ignoreFailures = true
    }

    apply plugin : "io.gitlab.arturbosch.detekt"
    detekt {
        // 並列処理
        parallel = true

        // Detektの関する設定ファイル
        config = files("$rootDir/detekt.yml")

        // デフォルト設定の上に自分の設定ファイルを適用する
        buildUponDefaultConfig = true

        // ルール違反があった場合にfailさせない
        // (正確にはルール違反の数がDetekt設定のmaxIssuesの値を超えたときにfailするのだが、
        //  デフォルト設定ではmaxIssuesは0になっているため、1つでもルール違反があるとfailする）
        ignoreFailures = true

        // レポートファイルに出力されるファイルパスのベースとなる
        // これが設定されてないとレポートファイルのパスは絶対パスになる
        basePath = rootProject.projectDir.absolutePath

        reports {
//            reports.xml.required.set(true)
             reports.sarif.required.set(true)
        }
    }

    plugins.withType(io.gitlab.arturbosch.detekt.DetektPlugin) {
        tasks.withType(io.gitlab.arturbosch.detekt.Detekt) { detektTask -> // Sadly it has to be eager.
            finalizedBy(reportMerge)

            reportMerge.configure { mergeTask ->
                mergeTask.input.from(detektTask.sarifReportFile) //xmlReportFile or sarifReportFile
            }
        }
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "https://dl.bintray.com/spekframework/spek-dev/" }
        maven { url "http://dl.bintray.com/jetbrains/spek" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'

        // https://mvnrepository.com/artifact/io.mockk/mockk
        testImplementation group: 'io.mockk', name: 'mockk', version: '1.10.2'
        // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-test-junit
        testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version

        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'

        testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion")
        testImplementation("org.spekframework.spek2:spek-runner-junit5:$spekVersion")
        testImplementation("junit:junit:4.12")
        testImplementation("org.junit.vintage:junit-vintage-engine:5.2.0")
    }

    jar {
        archivesBaseName = "$projectName-$moduleName"
        archiveVersion = "$moduleVersion"
    }


    task cleanLib(type: Delete) {
        description 'Cleans libraries.'
        group 'build'

        delete releaseDir
    }

    jacoco {
        toolVersion = "$jacocoToolVersion"
        reportsDir = file("${project.buildDir}/jacoco")
        applyTo junitPlatformTest
    }

    junitPlatformTest {
        jacoco {
            // Tells JUnit to output its test execution data here.
            destinationFile = file("${project.buildDir}/jacoco/junitExecutionData.exec")
        }

        jvmArgs += ['--add-opens', 'java.base/java.lang=ALL-UNNAMED']
    }

    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage report."
        executionData.setFrom(files("${project.buildDir}/jacoco/junitExecutionData.exec"))
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
            xml.destination file("${project.rootProject.buildDir}/jacoco/xml/${project.name}.xml")
            html.destination file("${project.buildDir}/jacoco/html")
        }

        onlyIf = {
            true
        }

        sourceDirectories.setFrom(files(project.sourceSets.main.allSource.srcDirs))
        classDirectories.setFrom(files(project.sourceSets.main.output))
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "11"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "11"
    }

}

task formatAllProjects() {
    group = 'formatting'
    description = 'Format all projects'
    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('org.jlleitschuh.gradle.ktlint')) {
            dependsOn "${p.path}:ktlintFormat"
        }
    }
}


task jacocoMerge(type: JacocoReport) {
    group = 'Reporting'
    description = "Merge all JaCoCo reports from projects into one."

    gradle.afterProject{ p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            executionData p.tasks.junitPlatformTest.jacoco.destinationFile
            dependsOn(p.tasks.junitPlatformTest)
        }
    }
}

task jacocoTestReports(type: JacocoReport, dependsOn: [tasks.jacocoMerge]) {
    group = 'Reporting'
    description = "Generate Jacoco coverage reports for the build. Only unit tests."

    gradle.afterProject{ p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            dependsOn(p.tasks.jacocoTestReport)
        }
    }
}
